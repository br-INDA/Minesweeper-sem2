// Copyright (c) 2018, Bill Mei
// Class used for managing the game's string display
class Strings {
   static String title, mineCount,
      instructionsA, instructionsB,
      gameLost, gameWon, restart,
      hitMineMessage, continueMessage,
      randomTitle, randomA, randomB, randomC, randomD;

   function void init() {
      // Initialize all the strings as static variables, so they do not take up
      // heap space when re-constructing the string multiple times.
      let title = "MINESWEEPER";
      let mineCount = "Mines remaining:    ";
      let instructionsA = "Controls: Arrow keys to move cursor";
      let instructionsB = "[f] for flag   [space] to reveal   [r] to restart   [q] to quit";
      let gameLost = "You stepped on a mine, game over!";
      let gameWon = "You won the game, congratulations!";
      let restart = "Press [r] to restart.";
      let hitMineMessage = "You stepped on a mine but have an extra life!";
      let continueMessage = "Press any key to continue...";
      let randomTitle = "RANDOM NUMBER GENERATOR INITIALIZATION";
      let randomA = "We need to generate some noise to seed the RNG.";
      let randomB = "Type some keys on your keyboard as randomly as you can until";
      let randomC = "the randomness counter reaches 100%, and then press [enter].";
      let randomD = "Randomness: ";
      return;
   }

   // Prints the title
   function void displayTitle() {
      do Output.moveCursor(0, 26);
      do Output.printString(title);
      return;
   }

   // Prints the number of mines remaining below the title
   function void displayMineCount(int count) {
      do Output.moveCursor(21, 44);
      do Output.printString(mineCount);
      do Output.moveCursor(21, 61);
      do Output.printInt(count);
      return;
   }
   
   // Clears the screen by setting all screen memory to 0
   function void clearScreen() {
      var int address;
      let address = 16384; // Start of screen memory

      while (address < 24576) { // End of screen memory
          do Memory.poke(address, 0); // Set each memory location to 0
          let address = address + 1;
      }
      return;
   }
   
   // Wait for specified number of milliseconds
   function void delay(int duration) {
      var int i, j;
      let i = 0;
      while (i < duration) {
         let j = 0;
         while (j < 10000) {  // Adjust this value based on system speed
            let j = j + 1;
         }
         let i = i + 1;
      }
      return;
   }

   // Prints the game lost status without returning to grid after delay
   function void displayGameLost(boolean returnToGrid) {
      do Strings.clearScreen(); // Clear the screen
      do Output.moveCursor(10, 15); // Set cursor to position (row=10, column=15)
      do Output.printString(gameLost); 
      do Output.moveCursor(12, 15);
      do Output.printString(restart);
      
      // returnToGrid parameter kept for compatibility but not used
      return;
   }

   // Prints the hit mine message but with extra life
   function void displayHitMine(boolean returnToGrid) {
      do Strings.clearScreen(); // Clear the screen
      do Output.moveCursor(10, 15); // Set cursor to position (row=10, column=15)
      do Output.printString(hitMineMessage); 
      do Output.moveCursor(12, 15);
      do Output.printString(continueMessage);
      
      // returnToGrid parameter kept for compatibility but not used
      return;
   }

   // Prints the game won status without returning to grid after delay
   function void displayGameWon(boolean returnToGrid) {
      do Strings.clearScreen(); // Clear the screen
      do Output.moveCursor(10, 15); // Set cursor to position (row=10, column=15)
      do Output.printString(gameWon); 
      do Output.moveCursor(12, 15);
      do Output.printString(restart);
      
      // returnToGrid parameter kept for compatibility but not used
      return;
   }

   // Prints a string to the status section (above the game area)
   function void displayStatus(String firstLine, String secondLine) {
      do Output.moveCursor(0, 15);
      do Output.printString(firstLine);
      do Output.moveCursor(1, 21);
      do Output.printString(secondLine);
      return;
   }

   // Prints the instructions below the game area
   function void displayInstructions() {
      do Output.moveCursor(21, 0);
      do Output.printString(instructionsA);
      do Output.moveCursor(22, 0);
      do Output.printString(instructionsB);
      return;
   }

   // Print instructions for initializing the Random Number Generator
   function void displayRandomInstructions() {
      do Output.printString(randomTitle);
      do Output.println();
      do Output.println();
      do Output.printString(randomA);
      do Output.println();
      do Output.printString(randomB);
      do Output.println();
      do Output.printString(randomC);
      do Output.println();
      do Output.println();
      do Output.printString(randomD);
      return;
   }

   // Deallocate the RNG initialization instruction strings to free up memory space
   function void disposeRandomInstructions() {
      do randomTitle.dispose();
      do randomA.dispose();
      do randomB.dispose();
      do randomC.dispose();
      do randomD.dispose();
      return;
   }
}